--------------------------------------------------------------------------------
Instructions:

- Thanks for your interest in NetSuite development! Please complete the
  following questions. If you can't solve a problem completely, feel free to
  submit your best partial solution, together with a comment as to what is
  missing or what shortcomings you see with your solution. We give partial
  credit!

- For programming questions use one of the languages: Java or C#.
  
- For SQL questions, you may use any dialect of SQL. Preferred dialects are
  ANSI SQL or Oracle SQL. Please indicate the dialect of SQL you are using.

- We'll be looking at everything. Pretend you are writing production code.
  We'll take into account comments (if any), identifier names, and formatting.
  Read assignment of individual tasks carefully so you do not miss any information.

- Good luck!                                                                2.0.1


--------------------------------------------------------------------------------
QUESTION 1 (Use Java or C#)

Given a sorted array of positive integers, write a method to find the most
frequent duplicate value in that array. In case there are two or more different
values with the same number of duplicates, return the first such a value found.
Return "-1" if there are no duplicates in the source array. You must not use any
dynamic data structures, i.e. do not use any classes from the java.util package,
or the equivalent .NET/C# library. Avoid using lambda expressions in your
implementation.

Example:

    For the following input array

    int[] values = {1, 2, 2, 3, 4, 4, 4, 4, 5, 6, 7, 8, 8, 8, 8, 9}

    the correct result is "4".

Solution template:

    int findMostFrequentDuplicateValue(int[] values)
    {
	//checks if array is non-empty
	if (values.length == 0)
		return -1;
		
	int occurences = 0;		//number of occurences for currently processed value
	int num = values[0];		//currently processed number from array of @values
	int occurenceMax = 0;		//max occurences of so far most frequent value in array
	int occurenceMaxNum = -1;	//value of so far most frequent value in array
		
	for(int i = 0; i < values.length; i++)
	{
		//checks if we still process the same value
		if (num != values[i])
		{
			//if more frequent value has been found, variables are updated
			if (occurenceMax < occurences) {
				occurenceMax = occurences;
				occurenceMaxNum = num;
			}
			occurences = 0;
			num = values[i];
		}

		occurences++;
	}
		
	//returns -1 if there are no duplicates
	if (occurenceMax < 2)
		return -1;
		
	return occurenceMaxNum;
    }

Questions (please answer these):
1. Did you write that as if you were writing production code?
Yes, I tried.:)
2. What assumptions does your implementation make about the input parameter?
The implementation assumes that the given array is sorted and with positive numbers as it was written in the task above. Though the method checks in the beginning whether the array is non-empty. In that case, method is ended at start and returns 0.
3. Are you using all the information you have about the input array?
Yes, I assumed that all the innformation given in the decription of the task is true.
4. What is the algorithmic complexity ("big O") of your function?
O(n), because depends on length of given input. 


--------------------------------------------------------------------------------
QUESTION 2 (Indicate the dialect of SQL you are using!)

You are given two database tables, EMPLOYEES and BONUS, with the following
schema.  Data shown below should be considered example data; the actual table
will contain other data.

   EMPLOYEES                                       BONUS
   __________________________________________      _____________
   EMPID  NAME  SUPERVISOR  LOCATION   SALARY      EMPID  NBONUS
   ------------------------------------------      -------------
      34  Amy               NY         110000         17    5000
      17  Ben           34  TN          75000         10    2000
       5  Chris         34  TN          80000         34    5000
      10  Don            5  HI         100000      ...
   ...

--Using SQLite--

A) Write a SQL statement to return the employee's name, supervisor's name and
   bonus of everyone who got a bonus greater than 2000.

select e.NAME,m.NAME, bonus.nbonus
from (EMPLOYEES e left join EMPLOYEES m) inner join BONUS
on m.EMPID = e.SUPERVISOR 
and e.EMPID = BONUS.EMPID 
and bonus.nbonus > 2000;

B) Write a SQL statement to list the highest paid employee in each location.
   Ranking should be based on salary plus bonus.  Output should include employee
   name, salary, bonus, and total pay (salary plus bonus).

select EMPLOYEES.NAME,max(EMPLOYEES.SALARY), BONUS.NBONUS, EMPLOYEES.SALARY + BONUS.NBONUS
from EMPLOYEES inner join BONUS
group by EMPLOYEES.LOCATION;

C) Given a NEW_SUPERVISOR table (columns: EMPID, SUPERVISOR), write an update
   statement that updates the supervisor of each employee with a new supervisor.
   The NEW_SUPERVISOR table is an incremental update, so employees not listed in
   the table must retain their existing supervisor.

update EMPLOYEES
set SUPERVISOR = (select NEW_SUPERVISOR.supervisor
                 from NEW_SUPERVISOR
                 WHERE NEW_SUPERVISOR.empid = EMPLOYEES.empid)
where EXISTS
(
  SELECT *
  FROM NEW_SUPERVISOR
  WHERE NEW_SUPERVISOR.empid = EMPLOYEES.empid
)


--------------------------------------------------------------------------------
QUESTION 3 (Use Java or C#)

Given a non-negative real number a, its square root is a number x, such that x * x = a.
One way to compute a square root is via successive approximation, where one estimate
yields a better estimate.

For example, let's say you are trying to find the square root of 2, and you have
an estimate of 1.5. We'll say a = 2, and x = 1.5. To compute a better estimate,
we'll divide a by x. This gives a new value y = 1.333333... However, we can't just
take this as our next estimate (why not?). We need to average it with the previous
estimate. So our next estimate, xx will be (x + y) / 2, or 1.416666...

Write a function that takes a non-negative real number a, and an epsilon (a
small real number), and returns an approximation of the square root of a.

    double square_root(double a, double epsilon)
    {
	double x = a/2;
	double y;
	double xx;
	while (Math.abs(x*x - a) > epsilon)
	{
		y = a/x;
		xx = (x + y)/2;
		x = xx;
	}
	return x;
    }

Epsilon determines how accurate the approximation needs to be. The function
should return the first approximation x it obtains that satisfies abs(x*x - a) < epsilon,
where abs(x) is the absolute value of x.

Questions (please answer these):
1. Why can't the next estimate, xx, be computed as a / x, where x is the
   previous estimate?
Because we would get the same estimate as x. For ex.
--for a = 3
--our first estimate is x = a/2 = 1.5
--our second is y = a/x = 2
--this created interval in which there is the next estimate <1.5,2>
--then the next xx = (x + y)/2 = 1.75
--if we would assume that xx = a/y = 1.5 or xx = a/x = 2 we would get our previous estimates and we would loop on the edges of interval
--we need our next estimate to be in the middle of interval, thats why xx = (x + y)/2 

2. What happens, in your implementation, if a = 0?
The result would be 0 because we divide a by our approximations which always gives 0.
3. What value does your program give for square_root(2, 1e-6)?
The result is 1.4142135623746899.


--------------------------------------------------------------------------------
BONUS Question 4 (This question is optional) 

Now implement the solution to QUESTION 1 using any approach (in any language) that you think
is the most suitable for this kind of task. Consider this question as a "free-style"
discipline and show your best!

    // enter your code here

Questions (please answer these):
1. What approach (and language) you chose and why?
